-- 初期化処理
function init(self)
	-- 各テキストノード
	self.text_nodes = {
		title = gui.get_node("title"),
		edition = gui.get_node("edition"),
		start = gui.get_node("start"),
		current_score = gui.get_node("current_score"),
		game_over = gui.get_node("game_over"),
		last_score = gui.get_node("last_score"),
		high_score = gui.get_node("high_score"),
		retry = gui.get_node("retry")
	}
	
	-- 各テキスト位置
	self.text_position = {
		title = gui.get_position(self.text_nodes.title),
		edition = gui.get_position(self.text_nodes.edition),
		start = gui.get_position(self.text_nodes.start),
		current_score = gui.get_position(self.text_nodes.current_score),
		game_over = gui.get_position(self.text_nodes.game_over),
		last_score = gui.get_position(self.text_nodes.last_score),
		high_score = gui.get_position(self.text_nodes.high_score),
		retry = gui.get_position(self.text_nodes.retry)
	}
	
	-- スコアとハイスコア
	self.score = 0
	self.high_score = 0
end

-- メッセージ受信
function on_message(self, message_id, message, sender)
	if message_id == hash("instruction") then
		if message.content == hash("start_play_text") or message.content == hash("restart_play_text") then
			self.score = 0
			
			for key, val in pairs(self.text_position) do
				if key == "current_score" then
					val.z = 0
				else
					val.z = -2
				end

				gui.set_position(self.text_nodes[key], val)
			end

			gui.set_text(self.text_nodes.current_score, self.score)
		elseif message.content == hash("start_game_over_text") then
			for key, val in pairs(self.text_position) do
				if key == "last_score" then
					gui.set_text(self.text_nodes[key], "Score:" .. self.score)
				elseif key == "high_score" then
					gui.set_text(self.text_nodes[key], "HighScore:" .. self.high_score)
				end

				if key == "title" or key == "edition" or key == "start" or key == "current_score" then
					val.z = -2
				else
					val.z = 0
				end

				gui.set_position(self.text_nodes[key], val)
			end
		elseif message.content == hash("increment_score") then
			self.score = self.score + 1
			
			-- ハイスコア更新
			if self.score > self.high_score then
				self.high_score = self.score
			end

			gui.set_text(self.text_nodes.current_score, self.score)
		end
	end
end